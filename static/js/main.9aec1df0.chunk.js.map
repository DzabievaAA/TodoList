{"version":3,"sources":["components/Workspace.js","components/Header.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Workspace","saveTodo","useState","value","setValue","onSubmit","event","preventDefault","TextField","variant","placeholder","margin","onChange","target","Header","TodoList","todos","deleteTodo","List","map","todo","index","ListItem","key","toString","dense","button","Checkbox","tabIndex","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","onClick","App","setTodos","className","console","warn","todoText","trimmedText","trim","length","todoIndex","newTodos","filter","_","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iRAwBeA,EArBG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAE9B,OAAO,6BACH,0BAAMC,SAAU,SAAAC,GAChBA,EAAMC,iBACNN,EAASE,GACTC,EAAS,MAEL,kBAACI,EAAA,EAAD,CACIC,QAAQ,WACRC,YAAY,WACZC,OAAO,SACPC,SAAU,SAAAN,GACNF,EAASE,EAAMO,OAAOV,QAExBA,MAAOA,OCVVW,EANA,WACf,OAAO,6BACH,4C,uECuBWC,EApBE,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACtB,OAAO,kBAACC,EAAA,EAAD,KACFF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACP,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAMG,WAAYC,OAAK,EAACC,QAAM,GACzC,kBAACC,EAAA,EAAD,CAAUC,UAAW,EAAGC,eAAa,IACrC,kBAACC,EAAA,EAAD,CAAcC,QAASX,IACvB,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,aAAW,SACXC,QAAS,WACLlB,EAAYI,KAEZ,kBAAC,IAAD,cCUTe,MAvBf,WAAgB,IAAD,EACalC,mBAAS,IADtB,mBACNc,EADM,KACCqB,EADD,KAEb,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQA,UAAU,eAClB,kBAAC,EAAD,aAAWrC,SAAUsC,QAAQC,MAA7B,YACW,SAAAC,GACT,IAAMC,EAAcD,EAASE,OACzBD,EAAYE,OAAS,GACvBP,EAAS,GAAD,mBAAKrB,GAAL,CAAY0B,SAGxB,kBAAC,EAAD,CAAU1B,MAAOA,EACjBC,WAAY,SAAA4B,GACV,IAAMC,EAAW9B,EACd+B,QAAO,SAACC,EAAG3B,GAAJ,OAAcA,IAAUwB,KAClCR,EAASS,QCVGG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.9aec1df0.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Workspace = ({saveTodo}) => {\r\n    const [value, setValue] = useState('');\r\n    return <div>\r\n        <form onSubmit={event => {\r\n        event.preventDefault();\r\n        saveTodo(value);\r\n        setValue('');\r\n      }}>            \r\n            <TextField\r\n                variant=\"outlined\"\r\n                placeholder=\"Add todo\"\r\n                margin=\"normal\"\r\n                onChange={event => {\r\n                    setValue(event.target.value);\r\n                  }}\r\n                  value={value}\r\n            />\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default Workspace;","import React from 'react';\r\n\r\nconst Header = () => {\r\nreturn <div>\r\n    <h2>To do list</h2>\r\n</div>\r\n}\r\n\r\nexport default Header;","import { Checkbox, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText} from '@material-ui/core';\r\nimport React from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\n\r\n\r\nconst TodoList = ({todos, deleteTodo}) => {\r\n    return <List>\r\n        {todos.map((todo, index) => (\r\n            <ListItem key={index.toString()} dense button>\r\n                <Checkbox tabIndex={-1} disableRipple />\r\n                <ListItemText primary={todo} />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton\r\n                    aria-label=\"Delete\"\r\n                    onClick={()=> {\r\n                        deleteTodo (index);\r\n                    }}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        ))}\r\n    </List>\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Workspace from './components/Workspace';\r\nimport Header from './components/Header';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]);\r\n  return (\r\n    <div className=\"App\">\r\n      <Header className=\"App-header\" />\r\n      <Workspace saveTodo={console.warn}\r\n       saveTodo={todoText => {\r\n        const trimmedText = todoText.trim();\r\n        if (trimmedText.length > 0) {\r\n          setTodos([...todos, trimmedText]);\r\n        }\r\n      }} />\r\n      <TodoList todos={todos}\r\n      deleteTodo={todoIndex => {\r\n        const newTodos = todos\r\n          .filter((_, index) => index !== todoIndex); \r\n        setTodos(newTodos);\r\n      }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}